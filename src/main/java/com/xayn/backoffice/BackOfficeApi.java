/*
 * Back Office API
 * # Back Office The back office is typically used within server-side apps. This SDK acts as a create/read/update/delete interface for anything related to documents.  ## Document By document, we refer to a cohesive text, for example a complete news article. However, we only require a simple representation for our system to work. Consisting just of a unique ID, a text snippet and optional properties. The text snippet is ideally a short, meaningful representation of the larger document, reduced to just one paragraph.  ### Id The document_id is a unique identifier for a single document. We don't require a specific format, it just needs to comply to the following regexp: `^[a-zA-Z0-9_:@.-]+$`.  ## Snippet A snippet is a reduced representation of a larger text, for example if the document would be a news article, then its text would be the news article in a pure textual format. In order for our system to work correctly, it is important that the snippet is just the size of one or two paragraphs, and that the snippet's text clearly summarises the larger text. For example, let's take a news article which talks about the effects of inflation. Our snippet could then be: \"Inflation worries as prices keep rising. People having budgetary difficulties as a result. Government pressured to take action.\". A bad snippet would for example be just taking the very first paragraph of a document, which could sometimes work, but could also lead to: \"December 20th 2020. Article written by Jane Doe. On this bright and sunny day, people might forget about their worries sometimes.\"  ## Properties Properties are optional entries for documents, which are usually needed to properly show the document back to the user, when it returns as a personalized document. If for example, you'd wish to integrate a type of carousel view, listing a total of 10 personalized documents in a \"for you\"-section, then you might choose to display each document as an image and title, with a url to link the user to when pressed. For this, you would need three document properties: `image`, `link` and `title`. You are free to add as many properties as needed.  ## Auth The API requires an authentication token when used. Please see further down in this README.md file, or refer to the test included in this SDK's codebase, on how to set this token correctly. \\
 *
 * The version of the OpenAPI document: 1.0.0-rc6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xayn.backoffice;

import com.xayn.backoffice.ApiCallback;
import com.xayn.backoffice.ApiClient;
import com.xayn.backoffice.ApiException;
import com.xayn.backoffice.ApiResponse;
import com.xayn.backoffice.Configuration;
import com.xayn.backoffice.Pair;
import com.xayn.backoffice.ProgressRequestBody;
import com.xayn.backoffice.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xayn.backoffice.models.DeleteDocumentsRequest;
import com.xayn.backoffice.models.DocumentPropertiesRequest;
import com.xayn.backoffice.models.DocumentPropertiesResponse;
import com.xayn.backoffice.models.DocumentPropertyRequest;
import com.xayn.backoffice.models.DocumentPropertyResponse;
import com.xayn.backoffice.models.GenericError;
import com.xayn.backoffice.models.IngestionError;
import com.xayn.backoffice.models.IngestionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BackOfficeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackOfficeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackOfficeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDocuments
     * @param ingestionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentsCall(IngestionRequest ingestionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ingestionRequest;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentsValidateBeforeCall(IngestionRequest ingestionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ingestionRequest' is set
        if (ingestionRequest == null) {
            throw new ApiException("Missing the required parameter 'ingestionRequest' when calling createDocuments(Async)");
        }

        return createDocumentsCall(ingestionRequest, _callback);

    }

    /**
     * Add documents to the system
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user. Important note: currently we allow up to a maximum of 100 documents per batch size. If you need to add more, then please split up the total amount of documents in separate calls, where each call contains at maximum 100 documents.
     * @param ingestionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public Object createDocuments(IngestionRequest ingestionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createDocumentsWithHttpInfo(ingestionRequest);
        return localVarResp.getData();
    }

    /**
     * Add documents to the system
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user. Important note: currently we allow up to a maximum of 100 documents per batch size. If you need to add more, then please split up the total amount of documents in separate calls, where each call contains at maximum 100 documents.
     * @param ingestionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createDocumentsWithHttpInfo(IngestionRequest ingestionRequest) throws ApiException {
        okhttp3.Call localVarCall = createDocumentsValidateBeforeCall(ingestionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add documents to the system (asynchronously)
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user. Important note: currently we allow up to a maximum of 100 documents per batch size. If you need to add more, then please split up the total amount of documents in separate calls, where each call contains at maximum 100 documents.
     * @param ingestionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentsAsync(IngestionRequest ingestionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentsValidateBeforeCall(ingestionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocument
     * @param documentId Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }

        return deleteDocumentCall(documentId, _callback);

    }

    /**
     * Delete the document from the system.
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param documentId Id of the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String documentId) throws ApiException {
        deleteDocumentWithHttpInfo(documentId);
    }

    /**
     * Delete the document from the system.
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param documentId Id of the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the document from the system. (asynchronously)
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param documentId Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentProperties
     * @param documentId Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertiesCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentPropertiesValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentProperties(Async)");
        }

        return deleteDocumentPropertiesCall(documentId, _callback);

    }

    /**
     * Delete all document properties
     * Deletes all the properties of the document.
     * @param documentId Id of the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentProperties(String documentId) throws ApiException {
        deleteDocumentPropertiesWithHttpInfo(documentId);
    }

    /**
     * Delete all document properties
     * Deletes all the properties of the document.
     * @param documentId Id of the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentPropertiesWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentPropertiesValidateBeforeCall(documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all document properties (asynchronously)
     * Deletes all the properties of the document.
     * @param documentId Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertiesAsync(String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentPropertiesValidateBeforeCall(documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentProperty
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertyCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties/{property_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentPropertyValidateBeforeCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentProperty(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling deleteDocumentProperty(Async)");
        }

        return deleteDocumentPropertyCall(documentId, propertyId, _callback);

    }

    /**
     * Delete a document property
     * Deletes the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentProperty(String documentId, String propertyId) throws ApiException {
        deleteDocumentPropertyWithHttpInfo(documentId, propertyId);
    }

    /**
     * Delete a document property
     * Deletes the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentPropertyWithHttpInfo(String documentId, String propertyId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentPropertyValidateBeforeCall(documentId, propertyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a document property (asynchronously)
     * Deletes the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertyAsync(String documentId, String propertyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentPropertyValidateBeforeCall(documentId, propertyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocuments
     * @param deleteDocumentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsCall(DeleteDocumentsRequest deleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDocumentsRequest;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentsValidateBeforeCall(DeleteDocumentsRequest deleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteDocumentsRequest' is set
        if (deleteDocumentsRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteDocumentsRequest' when calling deleteDocuments(Async)");
        }

        return deleteDocumentsCall(deleteDocumentsRequest, _callback);

    }

    /**
     * Delete all listed documents.
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param deleteDocumentsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocuments(DeleteDocumentsRequest deleteDocumentsRequest) throws ApiException {
        deleteDocumentsWithHttpInfo(deleteDocumentsRequest);
    }

    /**
     * Delete all listed documents.
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param deleteDocumentsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentsWithHttpInfo(DeleteDocumentsRequest deleteDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentsValidateBeforeCall(deleteDocumentsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all listed documents. (asynchronously)
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param deleteDocumentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsAsync(DeleteDocumentsRequest deleteDocumentsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentsValidateBeforeCall(deleteDocumentsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentProperty
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPropertyCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties/{property_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentPropertyValidateBeforeCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentProperty(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getDocumentProperty(Async)");
        }

        return getDocumentPropertyCall(documentId, propertyId, _callback);

    }

    /**
     * Get a document property
     * Gets the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentPropertyResponse getDocumentProperty(String documentId, String propertyId) throws ApiException {
        ApiResponse<DocumentPropertyResponse> localVarResp = getDocumentPropertyWithHttpInfo(documentId, propertyId);
        return localVarResp.getData();
    }

    /**
     * Get a document property
     * Gets the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @return ApiResponse&lt;DocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentPropertyResponse> getDocumentPropertyWithHttpInfo(String documentId, String propertyId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentPropertyValidateBeforeCall(documentId, propertyId, null);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a document property (asynchronously)
     * Gets the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPropertyAsync(String documentId, String propertyId, final ApiCallback<DocumentPropertyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentPropertyValidateBeforeCall(documentId, propertyId, _callback);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDocumentProperties
     * @param documentId Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentPropertiesCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDocumentPropertiesValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling listDocumentProperties(Async)");
        }

        return listDocumentPropertiesCall(documentId, _callback);

    }

    /**
     * Get all document properties
     * Gets all the properties of the document.
     * @param documentId Id of the document (required)
     * @return DocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentPropertiesResponse listDocumentProperties(String documentId) throws ApiException {
        ApiResponse<DocumentPropertiesResponse> localVarResp = listDocumentPropertiesWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Get all document properties
     * Gets all the properties of the document.
     * @param documentId Id of the document (required)
     * @return ApiResponse&lt;DocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentPropertiesResponse> listDocumentPropertiesWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = listDocumentPropertiesValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all document properties (asynchronously)
     * Gets all the properties of the document.
     * @param documentId Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentPropertiesAsync(String documentId, final ApiCallback<DocumentPropertiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDocumentPropertiesValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceDocumentProperties
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceDocumentPropertiesCall(String documentId, DocumentPropertiesRequest documentPropertiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentPropertiesRequest;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDocumentPropertiesValidateBeforeCall(String documentId, DocumentPropertiesRequest documentPropertiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling replaceDocumentProperties(Async)");
        }

        // verify the required parameter 'documentPropertiesRequest' is set
        if (documentPropertiesRequest == null) {
            throw new ApiException("Missing the required parameter 'documentPropertiesRequest' when calling replaceDocumentProperties(Async)");
        }

        return replaceDocumentPropertiesCall(documentId, documentPropertiesRequest, _callback);

    }

    /**
     * Set all document properties
     * Sets or replaces all the properties of the document.
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceDocumentProperties(String documentId, DocumentPropertiesRequest documentPropertiesRequest) throws ApiException {
        replaceDocumentPropertiesWithHttpInfo(documentId, documentPropertiesRequest);
    }

    /**
     * Set all document properties
     * Sets or replaces all the properties of the document.
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceDocumentPropertiesWithHttpInfo(String documentId, DocumentPropertiesRequest documentPropertiesRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceDocumentPropertiesValidateBeforeCall(documentId, documentPropertiesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set all document properties (asynchronously)
     * Sets or replaces all the properties of the document.
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceDocumentPropertiesAsync(String documentId, DocumentPropertiesRequest documentPropertiesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDocumentPropertiesValidateBeforeCall(documentId, documentPropertiesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceDocumentProperty
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceDocumentPropertyCall(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentPropertyRequest;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties/{property_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDocumentPropertyValidateBeforeCall(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling replaceDocumentProperty(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling replaceDocumentProperty(Async)");
        }

        // verify the required parameter 'documentPropertyRequest' is set
        if (documentPropertyRequest == null) {
            throw new ApiException("Missing the required parameter 'documentPropertyRequest' when calling replaceDocumentProperty(Async)");
        }

        return replaceDocumentPropertyCall(documentId, propertyId, documentPropertyRequest, _callback);

    }

    /**
     * Set a document property
     * Sets or replaces the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceDocumentProperty(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest) throws ApiException {
        replaceDocumentPropertyWithHttpInfo(documentId, propertyId, documentPropertyRequest);
    }

    /**
     * Set a document property
     * Sets or replaces the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceDocumentPropertyWithHttpInfo(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceDocumentPropertyValidateBeforeCall(documentId, propertyId, documentPropertyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set a document property (asynchronously)
     * Sets or replaces the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. Please check the path parameters, queries, and the request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceDocumentPropertyAsync(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDocumentPropertyValidateBeforeCall(documentId, propertyId, documentPropertyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
