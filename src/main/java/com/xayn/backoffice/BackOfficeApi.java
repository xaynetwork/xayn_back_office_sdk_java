/*
 * Back Office API
 * # Back Office For this system, a document is anything that has an id, a snippet, and an arbitrary set of properties. The id uniquely identifies the document in the system. The system uses the snippet to create a document representation that can be matched against user interests.  It is possible to attach any properties to a document; the system will not use them but will be returned together with the document when asking for personalized documents for a user. They could help store information like a title and the URL where it is possible to find the document. Each document can have its own set of properties.  The API offers an endpoint that allows uploading the documents to the system. After a successful upload, it will be possible to use the document in other endpoints.  # Auth To authenticate with the API, a token will be provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xayn.backoffice;

import com.xayn.backoffice.ApiCallback;
import com.xayn.backoffice.ApiClient;
import com.xayn.backoffice.ApiException;
import com.xayn.backoffice.ApiResponse;
import com.xayn.backoffice.Configuration;
import com.xayn.backoffice.Pair;
import com.xayn.backoffice.ProgressRequestBody;
import com.xayn.backoffice.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xayn.backoffice.models.DeleteDocumentsRequest;
import com.xayn.backoffice.models.DocumentPropertiesRequest;
import com.xayn.backoffice.models.DocumentPropertiesResponse;
import com.xayn.backoffice.models.DocumentPropertyRequest;
import com.xayn.backoffice.models.DocumentPropertyResponse;
import com.xayn.backoffice.models.IngestionError;
import com.xayn.backoffice.models.IngestionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BackOfficeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackOfficeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackOfficeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDocument
     * @param documentId Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }

        return deleteDocumentCall(documentId, _callback);

    }

    /**
     * Delete the document from the system.
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param documentId Id of the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String documentId) throws ApiException {
        deleteDocumentWithHttpInfo(documentId);
    }

    /**
     * Delete the document from the system.
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param documentId Id of the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the document from the system. (asynchronously)
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param documentId Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentProperties
     * @param documentId Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertiesCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentPropertiesValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentProperties(Async)");
        }

        return deleteDocumentPropertiesCall(documentId, _callback);

    }

    /**
     * Delete all document properties
     * Deletes all the properties of the document.
     * @param documentId Id of the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentProperties(String documentId) throws ApiException {
        deleteDocumentPropertiesWithHttpInfo(documentId);
    }

    /**
     * Delete all document properties
     * Deletes all the properties of the document.
     * @param documentId Id of the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentPropertiesWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentPropertiesValidateBeforeCall(documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all document properties (asynchronously)
     * Deletes all the properties of the document.
     * @param documentId Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertiesAsync(String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentPropertiesValidateBeforeCall(documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentProperty
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertyCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties/{property_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentPropertyValidateBeforeCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentProperty(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling deleteDocumentProperty(Async)");
        }

        return deleteDocumentPropertyCall(documentId, propertyId, _callback);

    }

    /**
     * Delete a document property
     * Deletes the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentProperty(String documentId, String propertyId) throws ApiException {
        deleteDocumentPropertyWithHttpInfo(documentId, propertyId);
    }

    /**
     * Delete a document property
     * Deletes the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentPropertyWithHttpInfo(String documentId, String propertyId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentPropertyValidateBeforeCall(documentId, propertyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a document property (asynchronously)
     * Deletes the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentPropertyAsync(String documentId, String propertyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentPropertyValidateBeforeCall(documentId, propertyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocuments
     * @param deleteDocumentsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsCall(DeleteDocumentsRequest deleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDocumentsRequest;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentsValidateBeforeCall(DeleteDocumentsRequest deleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        return deleteDocumentsCall(deleteDocumentsRequest, _callback);

    }

    /**
     * Delete all listed documents.
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param deleteDocumentsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocuments(DeleteDocumentsRequest deleteDocumentsRequest) throws ApiException {
        deleteDocumentsWithHttpInfo(deleteDocumentsRequest);
    }

    /**
     * Delete all listed documents.
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param deleteDocumentsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentsWithHttpInfo(DeleteDocumentsRequest deleteDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentsValidateBeforeCall(deleteDocumentsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all listed documents. (asynchronously)
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param deleteDocumentsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsAsync(DeleteDocumentsRequest deleteDocumentsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentsValidateBeforeCall(deleteDocumentsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentProperties
     * @param documentId Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPropertiesCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentPropertiesValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentProperties(Async)");
        }

        return getDocumentPropertiesCall(documentId, _callback);

    }

    /**
     * Get all document properties
     * Gets all the properties of the document.
     * @param documentId Id of the document (required)
     * @return DocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public DocumentPropertiesResponse getDocumentProperties(String documentId) throws ApiException {
        ApiResponse<DocumentPropertiesResponse> localVarResp = getDocumentPropertiesWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Get all document properties
     * Gets all the properties of the document.
     * @param documentId Id of the document (required)
     * @return ApiResponse&lt;DocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentPropertiesResponse> getDocumentPropertiesWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentPropertiesValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all document properties (asynchronously)
     * Gets all the properties of the document.
     * @param documentId Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPropertiesAsync(String documentId, final ApiCallback<DocumentPropertiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentPropertiesValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentProperty
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPropertyCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties/{property_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentPropertyValidateBeforeCall(String documentId, String propertyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentProperty(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getDocumentProperty(Async)");
        }

        return getDocumentPropertyCall(documentId, propertyId, _callback);

    }

    /**
     * Get a document property
     * Gets the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public DocumentPropertyResponse getDocumentProperty(String documentId, String propertyId) throws ApiException {
        ApiResponse<DocumentPropertyResponse> localVarResp = getDocumentPropertyWithHttpInfo(documentId, propertyId);
        return localVarResp.getData();
    }

    /**
     * Get a document property
     * Gets the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @return ApiResponse&lt;DocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentPropertyResponse> getDocumentPropertyWithHttpInfo(String documentId, String propertyId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentPropertyValidateBeforeCall(documentId, propertyId, null);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a document property (asynchronously)
     * Gets the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id or property id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPropertyAsync(String documentId, String propertyId, final ApiCallback<DocumentPropertyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentPropertyValidateBeforeCall(documentId, propertyId, _callback);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ingestDocuments
     * @param ingestionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ingestDocumentsCall(IngestionRequest ingestionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ingestionRequest;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingestDocumentsValidateBeforeCall(IngestionRequest ingestionRequest, final ApiCallback _callback) throws ApiException {
        return ingestDocumentsCall(ingestionRequest, _callback);

    }

    /**
     * Add documents to the system
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user.
     * @param ingestionRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public void ingestDocuments(IngestionRequest ingestionRequest) throws ApiException {
        ingestDocumentsWithHttpInfo(ingestionRequest);
    }

    /**
     * Add documents to the system
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user.
     * @param ingestionRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ingestDocumentsWithHttpInfo(IngestionRequest ingestionRequest) throws ApiException {
        okhttp3.Call localVarCall = ingestDocumentsValidateBeforeCall(ingestionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add documents to the system (asynchronously)
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user.
     * @param ingestionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> all or some of the documents were not successfully uploaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ingestDocumentsAsync(IngestionRequest ingestionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingestDocumentsValidateBeforeCall(ingestionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDocumentProperties
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDocumentPropertiesCall(String documentId, DocumentPropertiesRequest documentPropertiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentPropertiesRequest;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDocumentPropertiesValidateBeforeCall(String documentId, DocumentPropertiesRequest documentPropertiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling setDocumentProperties(Async)");
        }

        return setDocumentPropertiesCall(documentId, documentPropertiesRequest, _callback);

    }

    /**
     * Set all document properties
     * Sets or replaces all the properties of the document.
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public void setDocumentProperties(String documentId, DocumentPropertiesRequest documentPropertiesRequest) throws ApiException {
        setDocumentPropertiesWithHttpInfo(documentId, documentPropertiesRequest);
    }

    /**
     * Set all document properties
     * Sets or replaces all the properties of the document.
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDocumentPropertiesWithHttpInfo(String documentId, DocumentPropertiesRequest documentPropertiesRequest) throws ApiException {
        okhttp3.Call localVarCall = setDocumentPropertiesValidateBeforeCall(documentId, documentPropertiesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set all document properties (asynchronously)
     * Sets or replaces all the properties of the document.
     * @param documentId Id of the document (required)
     * @param documentPropertiesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDocumentPropertiesAsync(String documentId, DocumentPropertiesRequest documentPropertiesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDocumentPropertiesValidateBeforeCall(documentId, documentPropertiesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDocumentProperty
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDocumentPropertyCall(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentPropertyRequest;

        // create path and map variables
        String localVarPath = "/documents/{document_id}/properties/{property_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDocumentPropertyValidateBeforeCall(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling setDocumentProperty(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling setDocumentProperty(Async)");
        }

        return setDocumentPropertyCall(documentId, propertyId, documentPropertyRequest, _callback);

    }

    /**
     * Set a document property
     * Sets or replaces the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public void setDocumentProperty(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest) throws ApiException {
        setDocumentPropertyWithHttpInfo(documentId, propertyId, documentPropertyRequest);
    }

    /**
     * Set a document property
     * Sets or replaces the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setDocumentPropertyWithHttpInfo(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest) throws ApiException {
        okhttp3.Call localVarCall = setDocumentPropertyValidateBeforeCall(documentId, propertyId, documentPropertyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set a document property (asynchronously)
     * Sets or replaces the property of the document.
     * @param documentId Id of the document (required)
     * @param propertyId Id of the document property (required)
     * @param documentPropertyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid document id or property id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> document id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDocumentPropertyAsync(String documentId, String propertyId, DocumentPropertyRequest documentPropertyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDocumentPropertyValidateBeforeCall(documentId, propertyId, documentPropertyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
