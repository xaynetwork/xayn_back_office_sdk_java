openapi: 3.0.3
info:
  description: |-
    # Back Office
    The back office is typically used within server-side apps.
    This SDK acts as a create/read/update/delete interface for anything related to documents.

    ## Document
    By document, we refer to a cohesive text, for example a complete news article.
    However, we only require a simple representation for our system to work. Consisting just of a unique ID, a text snippet and optional properties.
    The text snippet is ideally a short, meaningful representation of the larger document, reduced to just one paragraph.

    ### Id
    The document_id is a unique identifier for a single document.
    We don't require a specific format, it just needs to comply to the following regexp: `^[a-zA-Z0-9_:@.-]+$`.

    ## Snippet
    A snippet is a reduced representation of a larger text, for example if the document would be a news article, then its text would be the news article in a pure textual format.
    In order for our system to work correctly, it is important that the snippet is just the size of one or two paragraphs, and that the snippet's text clearly summarises the larger text.
    For example, let's take a news article which talks about the effects of inflation.
    Our snippet could then be: "Inflation worries as prices keep rising. People having budgetary difficulties as a result. Government pressured to take action.".
    A bad snippet would for example be just taking the very first paragraph of a document, which could sometimes work, but could also lead to:
    "December 20th 2020. Article written by Jane Doe. On this bright and sunny day, people might forget about their worries sometimes."

    ## Properties
    Properties are optional entries for documents, which are usually needed to properly show the document back to the user, when it returns as a personalized document.
    If for example, you'd wish to integrate a type of carousel view, listing a total of 10 personalized documents in a "for you"-section, then you might choose to display each document as an image and title, with a url to link the user to when pressed.
    For this, you would need three document properties: `image`, `link` and `title`.
    You are free to add as many properties as needed.

    ## Auth
    The API requires an authentication token when used.
    Please see further down in this README.md file, or refer to the test included in this SDK's codebase, on how to set this token correctly.
    \
  title: Back Office API
  version: 1.0.0-rc10
servers:
- url: /
security:
- ApiKeyAuth: []
tags:
- description: "System management, including documents and properties."
  name: back office
paths:
  /documents:
    delete:
      description: |-
        Delete all documents listed in the request body. The endpoint is
        idempotent. I.e. if the list contains one or multiple non-existing
        documents, no error is produced.
      operationId: deleteDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete all listed documents.
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: |
        Add documents to the system.

        The system will create a representation of the document that will be used to match it against the preferences of a user.

        **Important note:** Currently we allow up to a maximum of 100 documents per batch size. If you need to add more, then
        please split up the total amount of documents in separate calls, where each call contains at maximum 100 documents.

        **Important note:** Documents which have no `publication_date` are not included when using the `published_after` filter.
      operationId: createDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionError'
          description: all or some of the documents were not successfully uploaded
      summary: Add documents to the system
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
  /documents/{document_id}:
    delete:
      description: |-
        Permanently deletes the document from the system. The endpoint is
        idempotent. Deleting a non-existing document does not produce an error.
      operationId: deleteDocument
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete the document from the system.
      tags:
      - back office
      x-accepts: application/json
  /documents/{document_id}/properties:
    delete:
      description: Deletes all the properties of the document.
      operationId: deleteDocumentProperties
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete all document properties
      tags:
      - back office
      x-accepts: application/json
    get:
      description: Gets all the properties of the document.
      operationId: listDocumentProperties
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertiesResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Get all document properties
      tags:
      - back office
      x-accepts: application/json
    put:
      description: Sets or replaces all the properties of the document.
      operationId: replaceDocumentProperties
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertiesRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Set all document properties
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
  /documents/{document_id}/properties/{property_id}:
    delete:
      description: Deletes the property of the document.
      operationId: deleteDocumentProperty
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Id of the document property
        explode: false
        in: path
        name: property_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentPropertyId'
        style: simple
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete a document property
      tags:
      - back office
      x-accepts: application/json
    get:
      description: Gets the property of the document.
      operationId: getDocumentProperty
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Id of the document property
        explode: false
        in: path
        name: property_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentPropertyId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertyResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Get a document property
      tags:
      - back office
      x-accepts: application/json
    put:
      description: Sets or replaces the property of the document.
      operationId: replaceDocumentProperty
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Id of the document property
        explode: false
        in: path
        name: property_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentPropertyId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertyRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Set a document property
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
components:
  parameters:
    document_id:
      description: Id of the document
      in: path
      name: document_id
      required: true
      schema:
        $ref: '#/components/schemas/DocumentId'
  responses:
    Created:
      content:
        application/json:
          schema:
            example: {}
            type: object
      description: Successful operation
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: "The request is invalid. Please check the path parameters, queries,\
        \ and the request body."
  schemas:
    DocumentPropertyRequest:
      example:
        property: News title
      properties:
        property:
          description: Arbitrary property that can be attached to a document.
          example: News title
      required:
      - property
      type: object
    DocumentPropertyResponse:
      example:
        property: Any valid json value
      properties:
        property:
          description: Arbitrary property that can be attached to a document.
          example: News title
      required:
      - property
      type: object
    DocumentPropertiesRequest:
      example:
        properties:
          title: News title
          image_url: http://example.com/news_image.jpg
          link: http://example.com/this_news
      properties:
        properties:
          $ref: '#/components/schemas/DocumentProperties'
      required:
      - properties
      type: object
    DocumentPropertiesResponse:
      example:
        properties:
          title: News title
      properties:
        properties:
          $ref: '#/components/schemas/DocumentProperties'
      required:
      - properties
      type: object
    IngestedDocument:
      example:
        snippet: snippet
        id: valid_id1
        properties:
          title: News title
          image_url: http://example.com/news_image.jpg
          link: http://example.com/this_news
        tags:
        - tag
        - tag
        - tag
        - tag
        - tag
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.\\-]+$"
          type: string
        snippet:
          description: Text that will be used to match the document against the user
            interests.
          maxLength: 1024
          minLength: 1
          pattern: .+
          type: string
        properties:
          $ref: '#/components/schemas/DocumentProperties'
        tags:
          items:
            $ref: '#/components/schemas/DocumentTag'
          maxItems: 10
          minItems: 0
          type: array
      required:
      - id
      - snippet
      type: object
    IngestionRequest:
      example:
        documents:
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          tags:
          - tag
          - tag
          - tag
          - tag
          - tag
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          tags:
          - tag
          - tag
          - tag
          - tag
          - tag
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          tags:
          - tag
          - tag
          - tag
          - tag
          - tag
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          tags:
          - tag
          - tag
          - tag
          - tag
          - tag
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          tags:
          - tag
          - tag
          - tag
          - tag
          - tag
      properties:
        documents:
          items:
            $ref: '#/components/schemas/IngestedDocument'
          maxItems: 100
          minItems: 1
          type: array
      required:
      - documents
      type: object
    IngestionError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - $ref: '#/components/schemas/IngestionError_allOf'
    DeleteDocumentsRequest:
      example:
        documents:
        - null
        - null
        - null
        - null
        - null
      properties:
        documents:
          items:
            $ref: '#/components/schemas/DocumentId'
          maxItems: 1000
          minItems: 1
          type: array
      required:
      - documents
      type: object
    GenericError:
      properties:
        request_id:
          description: Request ID optionally generated from the service. It can be
            communicated to xayn to help debugging.
          type: string
        kind:
          description: What kind of error this is.
          type: string
        details:
          description: Additional error details. Might differ depending on debug options.
          type: object
      type: object
    DocumentId:
      $ref: '#/components/schemas/Id'
    Id:
      description: "An id can be any non-empty string that consist of digits, latin\
        \ letters, underscores, colons, minus signs, at signs, and dots."
      example: valid_id1
      maxLength: 256
      minLength: 1
      pattern: "^[a-zA-Z0-9_:@.\\-]+$"
      type: string
    DocumentPropertyId:
      $ref: '#/components/schemas/Id'
    DocumentProperty:
      description: Arbitrary property that can be attached to a document.
      example: News title
    DocumentProperties:
      additionalProperties: true
      description: Mostly arbitrary properties that can be attached to a document.
        A key must be a valid `DocumentPropertyId`.
      example:
        title: News title
        image_url: http://example.com/news_image.jpg
        link: http://example.com/this_news
      properties:
        publication_date:
          description: |
            A RFC3339 compatible date-time

            - can be in the future
            - will be converted to and then stored as UTC
            - sub-second resolution is not guaranteed.
            - while `properties.publication_date` is in the future the document will not be
              returned for personalized documents, once it is no longer in the future it will
              automatically be considered for personalization from then on
          example: 2000-05-14T20:22:50Z
          format: date-time
          maxLength: 40
          minLength: 10
          type: string
      type: object
    DocumentTag:
      description: "A tag of a document can be any non-empty, UTF-8-encoded string\
        \ which doesn't contain a zero byte."
      example: tag
      maxLength: 256
      minLength: 1
      pattern: "^[^\\x00]+$"
      type: string
    PublicationDate:
      description: |
        A RFC3339 compatible date-time

        - can be in the future
        - will be converted to and then stored as UTC
        - sub-second resolution is not guaranteed.
        - while `properties.publication_date` is in the future the document will not be
          returned for personalized documents, once it is no longer in the future it will
          automatically be considered for personalization from then on
      example: 2000-05-14T20:22:50Z
      format: date-time
      maxLength: 40
      minLength: 10
      type: string
    IngestionError_allOf_details_documents:
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.\\-]+$"
          type: string
      required:
      - id
      type: object
      example: null
    IngestionError_allOf_details:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/IngestionError_allOf_details_documents'
          maxItems: 100
          minItems: 0
          type: array
      required:
      - documents
      type: object
      example: null
    IngestionError_allOf:
      properties:
        details:
          $ref: '#/components/schemas/IngestionError_allOf_details'
      required:
      - details
      type: object
      example: null
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: authorizationToken
      type: apiKey

