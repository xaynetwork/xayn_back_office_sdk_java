openapi: 3.0.3
info:
  description: |-
    # Back Office
    For this system, a document is anything that has an id, a snippet, and an arbitrary set of properties.
    The id uniquely identifies the document in the system.
    The system uses the snippet to create a document representation that can be matched against user interests.

    It is possible to attach any properties to a document; the system will not use them but will be returned together with the document when asking for personalized documents for a user. They could help store information like a title and the URL where it is possible to find the document. Each document can have its own set of properties.

    The API offers an endpoint that allows uploading the documents to the system. After a successful upload, it will be possible to use the document in other endpoints.

    # Auth
    To authenticate with the API, a token will be provided.
  title: Back Office API
  version: 1.0.0-rc6
servers:
- url: /
security:
- ApiKeyAuth: []
tags:
- description: Management of the documents in the system.
  name: back office
paths:
  /documents:
    delete:
      description: |-
        Delete all documents listed in the request body. The endpoint is
        idempotent. I.e. if the list contains one or multiple non-existing
        documents, no error is produced.
      operationId: deleteDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete all listed documents.
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: |-
        Add documents to the system. The system will create a representation of the document
        that will be used to match it against the preferences of a user.
      operationId: createDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionError'
          description: all or some of the documents were not successfully uploaded
      summary: Add documents to the system
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
  /documents/{document_id}:
    delete:
      description: |-
        Permanently deletes the document from the system. The endpoint is
        idempotent. Deleting a non-existing document does not produce an error.
      operationId: deleteDocument
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete the document from the system.
      tags:
      - back office
      x-accepts: application/json
  /documents/{document_id}/properties:
    delete:
      description: Deletes all the properties of the document.
      operationId: deleteDocumentProperties
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete all document properties
      tags:
      - back office
      x-accepts: application/json
    get:
      description: Gets all the properties of the document.
      operationId: listDocumentProperties
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertiesResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Get all document properties
      tags:
      - back office
      x-accepts: application/json
    put:
      description: Sets or replaces all the properties of the document.
      operationId: replaceDocumentProperties
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertiesRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Set all document properties
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
  /documents/{document_id}/properties/{property_id}:
    delete:
      description: Deletes the property of the document.
      operationId: deleteDocumentProperty
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Id of the document property
        explode: false
        in: path
        name: property_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentPropertyId'
        style: simple
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Delete a document property
      tags:
      - back office
      x-accepts: application/json
    get:
      description: Gets the property of the document.
      operationId: getDocumentProperty
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Id of the document property
        explode: false
        in: path
        name: property_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentPropertyId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertyResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Get a document property
      tags:
      - back office
      x-accepts: application/json
    put:
      description: Sets or replaces the property of the document.
      operationId: replaceDocumentProperty
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Id of the document property
        explode: false
        in: path
        name: property_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentPropertyId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertyRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Set a document property
      tags:
      - back office
      x-content-type: application/json
      x-accepts: application/json
components:
  parameters:
    document_id:
      description: Id of the document
      in: path
      name: document_id
      required: true
      schema:
        $ref: '#/components/schemas/DocumentId'
  responses:
    Created:
      content:
        application/json:
          schema:
            example: {}
            type: object
      description: Successful operation
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: "The request is invalid. Please check the path parameters, queries,\
        \ and the request body."
  schemas:
    DocumentPropertyRequest:
      example:
        property: News title
      properties:
        property:
          description: Arbitrary property that can be attached to a document.
          example: News title
      required:
      - property
      type: object
    DocumentPropertyResponse:
      example:
        property: Any valid json value
      properties:
        property:
          description: Arbitrary property that can be attached to a document.
          example: News title
      required:
      - property
      type: object
    DocumentPropertiesRequest:
      example:
        properties:
          title: News title
          image_url: http://example.com/news_image.jpg
          link: http://example.com/this_news
      properties:
        properties:
          additionalProperties:
            $ref: '#/components/schemas/DocumentProperty'
          description: Arbitrary properties that can be attached to a document. A
            key must be a valid `DocumentPropertyId`.
          example:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          type: object
      required:
      - properties
      type: object
    DocumentPropertiesResponse:
      example:
        properties:
          title: News title
      properties:
        properties:
          additionalProperties:
            $ref: '#/components/schemas/DocumentProperty'
          description: Arbitrary properties that can be attached to a document. A
            key must be a valid `DocumentPropertyId`.
          example:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          type: object
      required:
      - properties
      type: object
    IngestedDocument:
      example:
        snippet: snippet
        id: valid_id1
        properties:
          title: News title
          image_url: http://example.com/news_image.jpg
          link: http://example.com/this_news
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.-]+$"
          type: string
        snippet:
          description: Text that will be used to match the document against the user
            interests.
          maxLength: 1024
          minLength: 1
          pattern: .+
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/DocumentProperty'
          description: Arbitrary properties that can be attached to a document. A
            key must be a valid `DocumentPropertyId`.
          example:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          type: object
      required:
      - id
      - snippet
      type: object
    IngestionRequest:
      example:
        documents:
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
        - snippet: snippet
          id: valid_id1
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
      properties:
        documents:
          items:
            $ref: '#/components/schemas/IngestedDocument'
          maxItems: 100
          minItems: 1
          type: array
      required:
      - documents
      type: object
    IngestionError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - $ref: '#/components/schemas/IngestionError_allOf'
    DeleteDocumentsRequest:
      example:
        documents:
        - null
        - null
        - null
        - null
        - null
      properties:
        documents:
          items:
            $ref: '#/components/schemas/DocumentId'
          maxItems: 1000
          minItems: 1
          type: array
      required:
      - documents
      type: object
    GenericError:
      properties:
        request_id:
          description: Request ID optionally generated from the service. It can be
            communicated to xayn to help debugging.
          type: string
        kind:
          description: What kind of error this is.
          type: string
        details:
          description: Additional error details. Might differ depending on debug options.
          type: object
      type: object
    DocumentId:
      $ref: '#/components/schemas/Id'
    Id:
      description: "An id can be any non-empty string that consist of digits, latin\
        \ letters, underscores, colons, minus signs, at signs, and dots."
      example: valid_id1
      maxLength: 256
      minLength: 1
      pattern: "^[a-zA-Z0-9_:@.-]+$"
      type: string
    DocumentPropertyId:
      $ref: '#/components/schemas/Id'
    DocumentProperty:
      description: Arbitrary property that can be attached to a document.
      example: News title
    DocumentProperties:
      additionalProperties:
        $ref: '#/components/schemas/DocumentProperty'
      description: Arbitrary properties that can be attached to a document. A key
        must be a valid `DocumentPropertyId`.
      example:
        title: News title
        image_url: http://example.com/news_image.jpg
        link: http://example.com/this_news
      type: object
    IngestionError_allOf_details_documents:
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.-]+$"
          type: string
      required:
      - id
      type: object
      example: null
    IngestionError_allOf_details:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/IngestionError_allOf_details_documents'
          maxItems: 100
          minItems: 0
          type: array
      required:
      - documents
      type: object
      example: null
    IngestionError_allOf:
      properties:
        details:
          $ref: '#/components/schemas/IngestionError_allOf_details'
      required:
      - details
      type: object
      example: null
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: authorizationToken
      type: apiKey

